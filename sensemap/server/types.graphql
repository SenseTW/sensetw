type Map @model {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  objects: [Object!]! @relation(name: "MapObjects")
  cards: [Card!]! @relation(name: "MapCards")
  boxes: [Box!]! @relation(name: "MapBoxes")
}

enum ObjectType {
  CARD
  BOX
}

enum CardType {
  NORMAL
  QUESTION
  ANSWER
  NOTE
}

type Object @model {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  x: Float!
  y: Float!
  width: Float!
  height: Float!
  zIndex: Float!
  map: Map @relation(name: "MapObjects")
  objectType: ObjectType! @migrationValue(value: CARD)
  card: Card @relation(name: "ObjectCard")
  box: Box @relation(name: "ObjectBox")
  belongsTo: Box @relation(name: "ContainCards")
}

type Card @model {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  summary: String
  description: String
  tags: String
  saidBy: String
  stakeholder: String
  url: String
  cardType: CardType @migrationValue(value: NORMAL)
  objects: [Object!]! @relation(name: "ObjectCard")
  map: Map @relation(name: "MapCards")
}

type Box @model {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  summary: String
  tags: String
  objects: [Object!]! @relation(name: "ObjectBox")
  contains: [Object!]! @relation(name: "ContainCards")
  map: Map @relation(name: "MapBoxes")
}

type File @model {
  contentType: String!
  createdAt: DateTime!
  id: ID! @isUnique
  name: String!
  secret: String! @isUnique
  size: Int!
  updatedAt: DateTime!
  url: String! @isUnique
}

type User @model {
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
}
